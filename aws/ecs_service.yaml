AWSTemplateFormatVersion: 2010-09-09
Description: >
  This cloudformation represents a thespian's ECS service and all the associated resources to make that ECS service accessible from the outside world (via an ALB, if you choose to use one) or from other ECS services (via either ECS Service Connect or AWS Service Mesh).

  Note that the UseALB parameter defines whether or not to bother associating your ECS service with an ALB. Other parameters will become required if you opt into this.

  Note that it is assumed you have already created an ECR repository (the name is configurable but assumed to be "thespian") in the same AWS account and pushed a docker image to it with a distinctive tag (configurable but assumed to be "debian-buster-slim").

Parameters:
  UseALB:
    Type: String
    Description: Set this to true if you have an existing ALB with an HTTPS listener through which you want to expose your ECS service to the outside world.
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
  VPCId:
    Type: String
    Description: This is only necessary if you set UseALB to true.
  ALBDNSName:
    Type: String
    Description: This is only necessary if you set UseALB to true.
  ALBCanonicalHostedZoneId:
    Type: String
    Description: This is only necessary if you set UseALB to true.
  ALBListenerARN:
    Type: String
    Description: This is only necessary if you set UseALB to true.
  ALBListenerRulePriority:
    Type: Number
    Description: This is only necessary if you set UseALB to true. Every distinct service that is accessible via the ALB needs a distinct positive integer value for the corresponding ALB listener rule's priority. If we were doing something fancy with varying levels of request specificity, we would care about the actual comparative values, but we're not doing that, so we just need this value to be distinct across services.
    Default: 1
    MinValue: 1
    MaxValue: 50000
  PublicAddress:
    Type: String
    Description: This is only necessary if you set UseALB to true. Set this to whatever_subdomain_you_want.domain_you_own.com
  PublicAddressRoute53HostedZoneId:
    Type: String
    Description: This is only necessary if you set UseALB to true. This must correspond to domain_you_own.com (as referenced by the PublicAddress parameter)
  CloudMapNamespaceARN:
    Type: String
    MinLength: 1
  ECSClusterName:
    Type: String
    MinLength: 1
  ECRRepositoryName:
    Type: String
    Default: thespian
    MinLength: 1
  ServiceImageTag:
    Type: String
    Default: debian-buster-slim
    MinLength: 1
  ServiceName:
    Type: String
    Description: This is what the the ECS service will be named. For traffic from the outside world (via ALB) this will have to be passed as the value of the 'thespian-service-name' header For inter-ECS service traffic, this will simply be its address thanks to service discovery facilitated by AWS Cloud Map working in conjunction with either ECS Service Connect or AWS Service Mesh (not yet implemented).
    MinLength: 1
  # TODO: consider either removing this or using AllowedValues with one option
  ServicePort:
    Type: String
    Description: This is the 'PORT' environment variable.
    AllowedPattern: ^\d+$
    Default: '80'
  EnvVarConfigJson:
    Type: String
    Description: This is the 'CONFIG_JSON' environment variable.
    MinLength: 1
  EnvVarOtelBackendAddress:
    Type: String
    Description: This is the 'OTEL_BACKEND_ADDRESS' environment variable.
  EnvVarLokiAddress:
    Type: String
    Description: This is the 'LOKI_ADDRESS' environment variable.

Conditions:
  UseALB: !Equals [!Ref UseALB, 'true']

Resources:

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/ecs/${ECSClusterName}/${ServiceName}'

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ecs-tasks.amazonaws.com ]
            Action: [ sts:AssumeRole ]
      Policies:
        - PolicyName: minimal_permission_to_retrieve_image
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                Resource: !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ECRRepositoryName}'
              - Effect: Allow
                Action: ecr:GetAuthorizationToken
                Resource: '*'
        - PolicyName: minimal_permission_to_log_to_cloudwatch
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt LogGroup.Arn

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html
      # these numbers are bigger than the single visible container because AWS recommends adding "256 CPU units and at least 64 MiB of memory" for the invisible container that ECS Service Connect adds to the task. In practice, it looks like we can get away with less than that
      Cpu: 128
      Memory: 64
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepositoryName}:${ServiceImageTag}'
          # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinition.html#cfn-ecs-taskdefinition-containerdefinition-portmappings
          PortMappings:
            - ContainerPort: !Ref ServicePort
              HostPort: 0
              # if our service actually used multiple ports, we'd probably want to name them differently so that ECS Service Connect could distinguish them
              Name: !Ref ServiceName
              Protocol: tcp
          # TODO: consider removing these resource allocations since the entire task definition has its own overarching resource allocations
          Cpu: 16
          MemoryReservation: 32
          Memory: 32
          Environment:
            - Name: PORT
              Value: !Ref ServicePort
            - Name: CONFIG_JSON
              Value: !Ref EnvVarConfigJson
            - Name: OTEL_BACKEND_ADDRESS
              Value: !Ref EnvVarOtelBackendAddress
            - Name: LOKI_ADDRESS
              Value: !Ref EnvVarLokiAddress
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ServiceName
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      NetworkMode: bridge

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref ServiceName
      ServiceConnectConfiguration:
        Enabled: true
        Namespace: !Ref CloudMapNamespaceARN
        Services: 
          # Note that each of these must match a Name property in the TaskeDefinition's ContainerDefinitions' PortMappings
          - PortName: !Ref ServiceName
            # this is unnecessary if each other service that calls this one knows what port(s) this service uses, but normalizing it to 80 like this is probably a good standard
            ClientAliases:
              - DnsName: !Ref ServiceName
                Port: 80
      Cluster: !Ref ECSClusterName
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        !If 
          - UseALB
          - - ContainerName: !Ref ServiceName
              ContainerPort: !Ref ServicePort
              TargetGroupArn: !Ref ALBTargetGroup
          - !Ref AWS::NoValue

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: UseALB
    Properties:
      # health check configuration is based on https://aws.amazon.com/blogs/aws/new-application-load-balancer-support-for-end-to-end-http-2-and-grpc/
      HealthCheckEnabled: true
      HealthCheckPath: / # this is purposefully a path for which there is no grpc method. See the Matcher below
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 3
      HealthyThresholdCount: 2
      Matcher:
        # this is what your service is supposed to respond with from its health check endpoint if it's actually healthy
        # for grpc, when you hit a nonexistent endpoint, you should get a status code of 12. We only care that it's responding at all, so this is good enough 
        GrpcCode: '12'
      Port: !Ref ServicePort
      Protocol: HTTP
      # TLDR: ALB listener rules can only forward to grpc target groups if the ALB listener is HTTPS
      # if your ALB only has a listener for HTTP, the listener rule will fail to be created by cloudformation with the following error
      ### Resource handler returned message: "Invalid request provided: AWS::ElasticLoadBalancingV2::ListenerRule Validation exception" (RequestToken: 5894feb7-3a5d-5bb3-4d90-115a5cf030ef, HandlerErrorCode: InvalidRequest)
      # if you try in the UI to create a new ALB and attach a "listener" there, you will notice that your grpc target group isn't visible if you try to make an HTTP ALB listener. If you change to HTTPS, though, the grpc target group will suddenly become visible. If you select your grpc target group, the UI will erroneously let you switch the listener back to HTTP. At this point, if you try to create your load balancer with that HTTP listener, you'll see the following error message in the UI
      ### Listener protocol 'HTTP' is not supported with a target group with the protocol-version 'GRPC'
      ProtocolVersion: GRPC
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '15'
      TargetType: instance
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPCId

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: UseALB
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
            - !Ref PublicAddress
      ListenerArn: !Ref ALBListenerARN
      Priority: !Ref ALBListenerRulePriority

  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    DependsOn: ECSService
    Properties:
      Name: !Ref PublicAddress
      HostedZoneId: !Ref PublicAddressRoute53HostedZoneId
      Type: A
      AliasTarget:
        DNSName: !Ref ALBDNSName
        HostedZoneId: !Ref ALBCanonicalHostedZoneId